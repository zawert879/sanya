export interface ILoggingConfig {
    colors?: boolean;
    dateFormat?: string;
    debug?: boolean;
    directory?: string;
    enabled?: boolean;
    eventFile?: string;
    messageFile?: string;
    namespace?: string;
    toConsole?: boolean;
    nsWidth?: number;
}
export declare class Logger {
    static instance(config?: ILoggingConfig): Logger;
    private _messageFile;
    private _eventFile;
    private _config;
    private constructor();
    config: ILoggingConfig;
    readonly namespace: string;
    toString(): string;
    debug(str: string, filename?: string, self?: this): string;
    error(str: string, filename?: string, self?: this): string;
    event(str: string, id?: string, filename?: string, self?: this): string;
    info(str: string, filename?: string, self?: this): string;
    warn(str: string, filename?: string, self?: this): string;
    warning(str: string, filename?: string, self?: this): string;
    /**
     * Allows the user to override the default configuration for the simple logger.
     * See the ILoggingConfig interface for valid options.
     * @param config {ILoggingConfig} optional argumets to override the default logger
     * @param self {Logger} a reference to the objects this pointer renamed to self.
     */
    private configure(config?, self?);
    /**
     * Internal function that takes the details of a message and formats the logging
     * output that will be sent to the log and/or the console.  It uses the format:
     *
     *     [LEVEL] @ {timestamp}: {message}
     *
     * This function checks to see if the enviornment has been configured.  If it has
     * not, then it uses the default options.
     *
     * @param str {string} the string passed to output functions.
     * @param level {Levels} the logging level requested.
     * @param filename {string} the name of the module where the message originated
     * @returns {str} the message that was written/displayed
     */
    private message(str, level, filename?, self?);
}
export default Logger;

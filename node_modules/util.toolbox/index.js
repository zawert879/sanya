'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const ps = require("child_process");
const fs = require("fs-extra");
const path = require("path");
const util_rstrip_1 = require("util.rstrip");
const uuid = require('uuid');
exports.encoding = 'utf-8';
exports.success = 0;
exports.failure = 127;
exports.isDarwin = /^darwin/.test(process.platform);
exports.isLinux = /^linux/.test(process.platform);
exports.isMac = /^darwin/.test(process.platform);
exports.isWin = /^win/.test(process.platform);
exports.nil = (err, val) => {
    err = err;
    val = val;
};
exports.nilEvent = () => {
};
/**
 * Performs an asynchronous command line call to run a given user command.
 * This method uses the node `execFile` call so that the method can control
 * the calling shell and parameters used to invoke it.  It will use BASH by
 * default for Linux/Mac, and when the environment is windows it will attempt
 * to use powershell.  The shell can be overriden with the opts argument.
 *
 * When using default BASH options it will invoke as a login shell.
 *
 * @param cmd {string} the command to execute on the command line
 * @param [opts] {ICallOpts} optional arguments to the call
 *
 *     - `async: boolean`: if true, then the async version is called, otherwise
 *     the call will be synchronous.
 *     - `log: any`: the output logger that will be used with this call.  It
 *     uses a default of the console.log method.
 *     - `verbose: {boolean}`: if true, then output is printed
 *     - `shell: {string}`: the shell that will be invoked with this call.  It
 *     depends on the environment.
 *     - `shellArgs: {string[]}`: the parameters after shell, but before the
 *     given command.
 *
 * @param [cb] {Function} the callback function to execute when the command
 * finishes.
 */
function call(cmd, opts = null, cb = exports.nil) {
    if (typeof opts === 'function') {
        cb = opts;
        opts = null;
    }
    if (cmd == null) {
        return cb(new Error('No command given to execute in call'), exports.failure);
    }
    if (cmd instanceof Buffer) {
        cmd = cmd.toString();
    }
    else if (cmd instanceof Array) {
        cmd = cmd.join(' ');
    }
    opts = Object.assign({
        async: true,
        log: console.log,
        verbose: true,
        shell: (exports.isWin) ? 'powershell' : '/bin/bash',
        shellArgs: (exports.isWin) ? ['', cmd] : ['-l', '-c', cmd]
    }, opts);
    if (opts.verbose) {
        opts.log(`$ ${opts.shell} ${opts.shellArgs.join(' ')}`);
    }
    if (opts.async) {
        const out = ps.execFile(opts.shell, opts.shellArgs);
        out.stdout.on('data', (data) => {
            sanitize(data, opts.verbose);
            return out;
        });
        out.stderr.on('data', (data) => {
            sanitize(data, opts.verbose, console.error);
        });
        out.on('close', (code) => {
            if (code !== exports.success) {
                return cb(new Error(`Error executing command: ${cmd} (${code})`), code);
            }
            return cb(null, code);
        });
    }
    else {
        try {
            const data = ps.execFileSync(opts.shell, opts.shellArgs);
            sanitize(data, opts.verbose);
            return cb(null, exports.success);
        }
        catch (err) {
            return cb(err, exports.failure);
        }
    }
}
exports.call = call;
/**
 * Performs an synchronous command line call to run a given user command.
 * This is a wrapper for the call function to wait for the command to
 * finish.  When the call is finished a callback is executed.
 *
 * @param cmd {string} the command to execute on the command line
 * @param [opts] {ICallOpts} optional arguments to the call
 * @param [cb] {Function} the callback function to execute when the command
 * finishes.
 * @returns {number} returns 0 if the command was successful, otherwise 127.
 */
function callSync(cmd, opts = null) {
    let rc = exports.success;
    opts = Object.assign({
        async: false,
        log: console.log
    }, opts);
    call(cmd, opts, (err, code) => {
        if (err) {
            opts.log(err.message);
        }
        rc = code;
    });
    return rc;
}
exports.callSync = callSync;
/**
 * Takes an array of numbers and finds the closest value to the given
 * input number.
 *
 * Inspired by https://github.com/andreruffert/closest-number
 *
 * @param arr {number[]} array of numbers to search
 * @param num {number} the number value used as a reference to find
 * @returns {number} the number from arr that is closest to num
 */
function closestNumber(arr, num) {
    return arr.reduce((prev, curr) => (Math.abs(curr - num) < Math.abs(prev - num)) ? curr : prev);
}
exports.closestNumber = closestNumber;
/**
 * Retrieves a list of directories from the given input path.
 * @param src {string} the source directory to search for sub directories
 * @returns {Array} a list of directories.
 */
function getDirectories(src) {
    return fs.readdirSync(src)
        .filter((file) => fs.statSync(path.join(src, file)).isDirectory());
}
exports.getDirectories = getDirectories;
/**
 * Generates a random integer between the two specified values.  The value is
 * no lower than min and not equal to max (not inclusive).  Do not use this
 * for cryptography.
 *
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
 *
 * @param min {number} the smallest integer to use, inclusive
 * @param max {number} the largest integer to use, non inclusive
 * @returns {number} a pseudo random number
 */
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}
exports.getRandomInt = getRandomInt;
/**
 * Generates a random integer between the two specified values.  The value is
 * no lower than min and less than or equal to max (inclusive).  Do not use this
 * for cryptography.
 *
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
 *
 * @param min {number} the smallest integer to use, inclusive
 * @param max {number} the largest integer to use, inclusive
 * @returns {number} a pseudo random number
 */
function getRandomIntInclusive(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
exports.getRandomIntInclusive = getRandomIntInclusive;
/**
 * Retrieves a version 4 uuid.  It can be with or without the dash characters.
 * @param nodash {boolean} if true, the dashes are removed, otherwise just a
 * v4 uuid is created.
 * @returns {string} a v4 uuid
 */
function getUUID(nodash = false) {
    if (nodash) {
        return uuid.v4().replace(/-/g, '');
    }
    return uuid.v4();
}
exports.getUUID = getUUID;
/**
 * Takes a data buffer of output bytes, converts it to a string and then splits
 * it on newlines for output.  By default it is just saved into a sanitized
 * array.  If verbose is set to true, then the buffer it output to the console
 * line by line.
 * @param buffer {string} the output bytes to convert and print to log.
 * @param verbose {boolean} if true, then the sanitized output is sent to
 * the console.
 * @param log {console.log} the output logger to write the output when verbose.
 * @retuns {string[]} an array of string that represent the lines given with
 * the input buffer.
 */
function sanitize(buffer, verbose = false, log = console.log) {
    if (buffer == null && typeof buffer !== 'string' && !(buffer instanceof Buffer)) {
        return [];
    }
    if (buffer instanceof Buffer) {
        buffer = buffer.toString();
    }
    buffer = util_rstrip_1.rstrip(buffer);
    const lines = buffer.split(/\r\n|\r|\n/).map(util_rstrip_1.rstrip);
    if (verbose) {
        lines.forEach((line) => {
            log(line);
        });
    }
    return lines;
}
exports.sanitize = sanitize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsb0NBQW9DO0FBQ3BDLCtCQUErQjtBQUMvQiw2QkFBNkI7QUFDN0IsNkNBQW1DO0FBRW5DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUVoQixRQUFBLFFBQVEsR0FBVyxPQUFPLENBQUM7QUFDM0IsUUFBQSxPQUFPLEdBQVcsQ0FBQyxDQUFDO0FBQ3BCLFFBQUEsT0FBTyxHQUFXLEdBQUcsQ0FBQztBQUV0QixRQUFBLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QyxRQUFBLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQyxRQUFBLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QyxRQUFBLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQWV4QyxRQUFBLEdBQUcsR0FBaUIsQ0FBQyxHQUFXLEVBQUUsR0FBUyxFQUFRLEVBQUU7SUFDL0QsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDWCxDQUFDLENBQUM7QUFRUyxRQUFBLFFBQVEsR0FBc0IsR0FBUyxFQUFFO0FBQ3BELENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFDSCxjQUFxQixHQUErQixFQUFFLE9BQVksSUFBSSxFQUFFLEVBQUUsR0FBRyxXQUFHO0lBQy9FLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVSxFQUFFO1FBQy9CLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDVixJQUFJLEdBQUcsSUFBSSxDQUFD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
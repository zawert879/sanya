'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const sprintf_js_1 = require("sprintf-js");
const util_join_1 = require("util.join");
const util_timestamp_1 = require("util.timestamp");
const uuid = require("uuid");
const chalk = require('chalk');
const instances = new Map();
var Level;
(function (Level) {
    Level[Level["DEBUG"] = 0] = "DEBUG";
    Level[Level["INFO"] = 1] = "INFO";
    Level[Level["WARN"] = 2] = "WARN";
    Level[Level["ERROR"] = 3] = "ERROR";
    Level[Level["EVENT"] = 4] = "EVENT";
})(Level || (Level = {}));
class Logger {
    constructor() {
        this._messageFile = null;
        this._eventFile = null;
        this._config = null;
    }
    static instance(config) {
        config = Object.assign({
            colors: true,
            dateFormat: '%Y-%m-%d @ %H:%M:%S:%L',
            debug: false,
            directory: './logs',
            enabled: true,
            eventFile: 'events.log',
            messageFile: 'messages.log',
            namespace: 'default',
            nsWidth: 15,
            toConsole: false
        }, config);
        if (config.namespace == null) {
            config.namespace = uuid.v4();
        }
        let inst = instances.get(config.namespace);
        if (inst == null) {
            inst = new Logger();
            instances.set(config.namespace, inst);
        }
        inst.configure(config);
        return inst;
    }
    get config() {
        return this._config;
    }
    set config(val) {
        this._config = val;
    }
    get namespace() {
        return this._config.namespace;
    }
    toString() {
        const a = [
            JSON.stringify(this.config, null, 4),
            '\ninstances:'
        ].concat([...instances.keys()].map(it => ` - ${it}`), '');
        return a.join('\n');
    }
    debug(str, filename, self = this) {
        if (self.config.debug) {
            return self.message(str, Level.DEBUG, filename);
        }
        return '';
    }
    error(str, filename, self = this) {
        return self.message(str, Level.ERROR, filename);
    }
    event(str, id, filename, self = this) {
        if (id != null) {
            if (self.config.colors) {
                str = `${chalk.white.bgBlue(id)} => ${str}`;
            }
            else {
                str = `${id} => ${str}`;
            }
        }
        return self.message(str, Level.EVENT, filename);
    }
    info(str, filename, self = this) {
        return self.message(str, Level.INFO, filename);
    }
    warn(str, filename, self = this) {
        return self.warning(str, filename);
    }
    warning(str, filename, self = this) {
        return self.message(str, Level.WARN, filename);
    }
    /**
     * Allows the user to override the default configuration for the simple logger.
     * See the ILoggingConfig interface for valid options.
     * @param config {ILoggingConfig} optional argumets to override the default logger
     * @param self {Logger} a reference to the objects this pointer renamed to self.
     */
    configure(config, self = this) {
        self.config = config;
        if (self.config.colors) {
            chalk.enabled = true;
        }
        if (!fs.existsSync(self.config.directory)) {
            fs.mkdirSync(self.config.directory);
        }
        if (self.config.messageFile != null) {
            self._messageFile = util_join_1.join(self.config.directory, self.config.messageFile);
            if (!fs.existsSync(self._messageFile)) {
                fs.writeFileSync(self._messageFile, '');
            }
        }
        if (self.config.eventFile != null) {
            self._eventFile = util_join_1.join(self.config.directory, self.config.eventFile);
            if (!fs.existsSync(self._eventFile)) {
                fs.writeFileSync(self._eventFile, '');
            }
        }
    }
    /**
     * Internal function that takes the details of a message and formats the logging
     * output that will be sent to the log and/or the console.  It uses the format:
     *
     *     [LEVEL] @ {timestamp}: {message}
     *
     * This function checks to see if the enviornment has been configured.  If it has
     * not, then it uses the default options.
     *
     * @param str {string} the string passed to output functions.
     * @param level {Levels} the logging level requested.
     * @param filename {string} the name of the module where the message originated
     * @returns {str} the message that was written/displayed
     */
    message(str, level, filename = '', self = this) {
        if (!self.config.enabled) {
            return '';
        }
        const nsWidth = self.config.nsWidth;
        let timestamp = util_timestamp_1.timestamp({ dateFormat: self.config.dateFormat });
        let levelStr = String(level);
        let namespace = sprintf_js_1.sprintf(`%' -${nsWidth}s`, self.config.namespace.trim().substr(0, nsWidth));
        switch (level) {
            case Level.DEBUG:
                levelStr = (self.config.colors) ? chalk.gray('DEBUG') : 'DEBUG';
                break;
            case Level.INFO:
                levelStr = (self.config.colors) ? chalk.green('INFO ') : 'INFO ';
                break;
            case Level.WARN:
                levelStr = (self.config.colors) ? chalk.yellow('WARN ') : 'WARN ';
                break;
            case Level.ERROR:
                levelStr = (self.config.colors) ? chalk.red('ERROR') : 'ERROR';
                break;
            case Level.EVENT:
                levelStr = (self.config.colors) ? chalk.blue('EVENT') : 'EVENT';
                break;
        }
        if (filename !== '' && filename != null) {
            filename = `\{${path.basename(filename)}\}`;
        }
        if (self.config.colors) {
            timestamp = chalk.cyan(timestamp);
            namespace = chalk.magenta(namespace);
            filename = chalk.underline(filename);
        }
        const msg = `[${levelStr}] ${timestamp} [${namespace}] ~> ${str} ${filename}`;
        try {
            if (level === Level.EVENT && self._eventFile != null && fs.existsSync(self._eventFile)) {
                fs.appendFileSync(self._eventFile, msg + '\n');
            }
            if (self._messageFile != null && fs.existsSync(self._messageFile)) {
                fs.appendFileSync(self._messageFile, msg + '\n');
            }
            if (self.config.toConsole) {
                if (level === Level.ERROR) {
                    console.error(msg);
                }
                else {
                    console.log(msg);
                }
            }
        }
        catch (err) {
            console.warn(`log output no longer available: ${err}`);
        }
        return msg;
    }
}
exports.Logger = Logger;
exports.default = Logger;
//# sourceMappingURL=data:application/json;base64,